name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: make deps
      
      - name: Check formatting
        run: make format
      
      - name: Analyze project source
        run: make analyze
      
      - name: Run tests
        run: make test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Security check
        run: make security

  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: make deps
      
      - name: Build profile APK
        run: flutter build apk --profile
      
      - name: Analyze app size
        run: |
          APK_SIZE=$(stat -c%s build/app/outputs/flutter-apk/app-profile.apk)
          echo "APK Size: $APK_SIZE bytes"
          if [ $APK_SIZE -gt 100000000 ]; then
            echo "Warning: APK size exceeds 100MB"
            exit 1
          fi
      
      - name: Generate performance report
        run: |
          mkdir -p build/reports/performance
          flutter analyze --write=build/reports/performance/static_analysis.txt
      
      - name: Archive performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: build/reports/performance

  golden-test:
    name: Golden Tests
    runs-on: macos-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: make deps
      
      - name: Generate golden files
        run: flutter test --update-goldens --tags=golden
      
      - name: Run golden tests
        run: flutter test --tags=golden
      
      - name: Archive golden test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: golden-failures
          path: test/goldens/failures
        if: failure()

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, performance, golden-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: make deps
      
      - name: Build release
        run: flutter build apk --release
      
      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-release.apk 